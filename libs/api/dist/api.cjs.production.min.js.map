{"version":3,"file":"api.cjs.production.min.js","sources":["../src/utils/Router.ts","../src/utils/Error.ts","../src/utils/Body.ts","../src/utils/Route.ts","../src/utils/Header.ts"],"sourcesContent":["import {RouterOptions} from \"../interfaces/RouterOptions\";\r\nimport {Route} from \"./Route\";\r\nimport express from \"express\";\r\n\r\nexport class Router {\r\n    private readonly _options: RouterOptions | undefined;\r\n    private readonly _moduleName: string;\r\n    private readonly _route: Route | any;\r\n    private _router: Router | any;\r\n\r\n    constructor(options: RouterOptions | undefined, moduleName: string, route: Route | any) {\r\n        this._options = options;\r\n        this._moduleName = moduleName;\r\n        this._route = route;\r\n    }\r\n\r\n    main() {\r\n        this._router = express.Router();\r\n        this._router.use(this._route.baseUrl, this._route.main(this._options));\r\n        this._router.get('/try', (req: express.Request, res: express.Response) => {\r\n            req;\r\n            res.send('success')\r\n        })\r\n        return this._router;\r\n    }\r\n\r\n    // @ts-ignore\r\n    get options () {\r\n        return this._options;\r\n    }\r\n\r\n    // @ts-ignore\r\n    get moduleName () {\r\n        return this._moduleName;\r\n    }\r\n\r\n    // @ts-ignore\r\n    get route () {\r\n        return this._route;\r\n    }\r\n}","import {Response} from 'express';\r\n\r\nexport const Error = (code: number, message: string, response: Response) => {\r\n    response.status(code).json({\r\n        error: true,\r\n        message\r\n    })\r\n}","import {Request, Response} from \"express\";\r\nimport {Error} from \"./Error\";\r\n\r\nexport const bodyController = (req: Request, res: Response, meta: [string]) => {\r\n    let error: boolean = false;\r\n    meta.map((mt: string) => {\r\n        if (!req.body[mt]) {\r\n            error = true;\r\n            // @ts-ignore\r\n            return Error(404, `Missing ${mt} in body`, res);\r\n        }\r\n    })\r\n    return error;\r\n}","import {RequestOptions} from \"../interfaces/RequestOptions\";\r\nimport {RouterOptions} from \"../interfaces/RouterOptions\";\r\nimport {bodyController} from \"./Body\";\r\nimport {headerController} from \"./Header\";\r\nimport {Request, Response, Router} from \"express\";\r\n\r\nexport class Route {\r\n    private readonly _baseUrl: string;\r\n    private readonly _request: [{\r\n        type: string,\r\n        path: string,\r\n        options: RequestOptions,\r\n        execute: void\r\n    }] | any;\r\n    private readonly _routes: [Route] | any;\r\n    private _router: Router | any;\r\n    private _options: RouterOptions | object;\r\n\r\n    constructor(baseUrl: string) {\r\n        this._baseUrl = baseUrl;\r\n        this._request = [];\r\n        this._routes = [];\r\n        this._options = {};\r\n    }\r\n\r\n    main(options: RouterOptions | object) {\r\n        this._options = options;\r\n        this._router = Router();\r\n        this._request.map((request: { type: string | number; path: string; options: RouterOptions; execute: (options: object, req: object, res: object) => void }) => {\r\n            this._router[request.type](request.path, (req: Request, res: Response) => {\r\n                // @ts-ignore\r\n                if (request.options['bodyController'] && request.options['bodyController'][0]) {\r\n                    // @ts-ignore\r\n                    if (bodyController(req, res, request.options['bodyController'])) return;\r\n                }\r\n\r\n                // @ts-ignore\r\n                if (request.options['headerController'] && request.options['headerController'][0]) {\r\n                    // @ts-ignore\r\n                    if (headerController(req, res, request.options['headerController'])) return;\r\n                }\r\n                request.execute(this._options, req, res);\r\n            })\r\n        })\r\n        if (this._routes[0]) {\r\n            this._routes.map((route: Route) => {\r\n                this._router.use(route.baseUrl, route.main(this._options))\r\n            })\r\n        }\r\n        return this._router;\r\n    }\r\n\r\n    use(route: Route) {\r\n        this._routes.push(route);\r\n    }\r\n\r\n    get(path: string ,options: RequestOptions, execute :(options: RouterOptions, req: Request, res: Response) => void) {\r\n        this._request.push({\r\n            type: 'get',\r\n            path,\r\n            options,\r\n            execute\r\n        })\r\n        return this\r\n    }\r\n\r\n    post(path: string, options: RequestOptions, execute :(options: RouterOptions, req: Request, res: Response) => void) {\r\n        // @ts-ignore\r\n        this._request.push({\r\n            type: 'post',\r\n            path,\r\n            options,\r\n            execute\r\n        })\r\n        return this\r\n    }\r\n\r\n    put(path: string, options: RequestOptions, execute :(options: RouterOptions, req: Request, res: Response) => void) {\r\n        // @ts-ignore\r\n        this._request.push({\r\n            type: 'put',\r\n            path,\r\n            options,\r\n            execute\r\n        })\r\n        return this\r\n    }\r\n\r\n    delete(path: string, options: RequestOptions, execute :(options: RouterOptions, req: Request, res: Response) => void) {\r\n        // @ts-ignore\r\n        this._request.push({\r\n            type: 'delete',\r\n            path,\r\n            options,\r\n            execute\r\n        })\r\n        return this\r\n    }\r\n\r\n    // @ts-ignore\r\n    get baseUrl() {\r\n        return this._baseUrl;\r\n    }\r\n\r\n    // @ts-ignore\r\n    get request() {\r\n        return this._request;\r\n    }\r\n}","import {Request, Response} from \"express\";\r\nimport {Error} from \"./Error\";\r\n\r\nexport const headerController = (req: Request, res: Response, meta: [string]) => {\r\n    let error: boolean = false;\r\n    meta.map((mt: string) => {\r\n        if (!req.headers[mt]) {\r\n            error = true;\r\n            // @ts-ignore\r\n            return Error(404, `Missing ${mt} in header`, res);\r\n        }\r\n    })\r\n    return error;\r\n}"],"names":["Router","options","moduleName","route","_options","_moduleName","_route","main","_router","express","use","this","baseUrl","get","req","res","send","Error","code","message","response","status","json","error","bodyController","meta","map","mt","body","Route","_baseUrl","_request","_routes","request","_this","type","path","headers","headerController","execute","push","post","put"],"mappings":"4aAIaA,wBAMGC,EAAoCC,EAAoBC,QAC3DC,SAAWH,OACXI,YAAcH,OACdI,OAASH,qBAGlBI,KAAA,uBACSC,QAAUC,EAAQT,cAClBQ,QAAQE,IAAIC,KAAKL,OAAOM,QAASD,KAAKL,OAAOC,KAAKI,KAAKP,gBACvDI,QAAQK,IAAI,QAAQ,SAACC,EAAsBC,GAE5CA,EAAIC,KAAK,cAENL,KAAKH,iCAIhB,kBACWG,KAAKP,iCAIhB,kBACWO,KAAKN,+BAIhB,kBACWM,KAAKL,gBCpCPW,EAAQ,SAACC,EAAcC,EAAiBC,GACjDA,EAASC,OAAOH,GAAMI,KAAK,CACvBC,OAAO,EACPJ,QAAAA,KCFKK,EAAiB,SAACV,EAAcC,EAAeU,OACpDF,GAAiB,SACrBE,EAAKC,KAAI,SAACC,OACDb,EAAIc,KAAKD,UACVJ,GAAQ,EAEDN,EAAM,eAAgBU,aAAcZ,MAG5CQ,GCNEM,wBAYGjB,QACHkB,SAAWlB,OACXmB,SAAW,QACXC,QAAU,QACV5B,SAAW,8BAGpBG,KAAA,SAAKN,0BACIG,SAAWH,OACXO,QAAUR,gBACV+B,SAASL,KAAI,SAACO,GACfC,EAAK1B,QAAQyB,EAAQE,MAAMF,EAAQG,MAAM,SAACtB,EAAcC,GAEhDkB,EAAQhC,QAAR,gBAAqCgC,EAAQhC,QAAR,eAAkC,IAEnEuB,EAAeV,EAAKC,EAAKkB,EAAQhC,QAAR,iBAI7BgC,EAAQhC,QAAR,kBAAuCgC,EAAQhC,QAAR,iBAAoC,IClC/D,SAACa,EAAcC,EAAeU,OACtDF,GAAiB,SACrBE,EAAKC,KAAI,SAACC,OACDb,EAAIuB,QAAQV,UACbJ,GAAQ,EAEDN,EAAM,eAAgBU,eAAgBZ,MAG9CQ,ED2Bae,CAAiBxB,EAAKC,EAAKkB,EAAQhC,QAAR,mBAEnCgC,EAAQM,QAAQL,EAAK9B,SAAUU,EAAKC,SAGxCJ,KAAKqB,QAAQ,SACRA,QAAQN,KAAI,SAACvB,GACd+B,EAAK1B,QAAQE,IAAIP,EAAMS,QAAST,EAAMI,KAAK2B,EAAK9B,cAGjDO,KAAKH,WAGhBE,IAAA,SAAIP,QACK6B,QAAQQ,KAAKrC,MAGtBU,IAAA,SAAIuB,EAAcnC,EAAyBsC,eAClCR,SAASS,KAAK,CACfL,KAAM,MACNC,KAAAA,EACAnC,QAAAA,EACAsC,QAAAA,IAEG5B,QAGX8B,KAAA,SAAKL,EAAcnC,EAAyBsC,eAEnCR,SAASS,KAAK,CACfL,KAAM,OACNC,KAAAA,EACAnC,QAAAA,EACAsC,QAAAA,IAEG5B,QAGX+B,IAAA,SAAIN,EAAcnC,EAAyBsC,eAElCR,SAASS,KAAK,CACfL,KAAM,MACNC,KAAAA,EACAnC,QAAAA,EACAsC,QAAAA,IAEG5B,eAGX,SAAOyB,EAAcnC,EAAyBsC,eAErCR,SAASS,KAAK,CACfL,KAAM,SACNC,KAAAA,EACAnC,QAAAA,EACAsC,QAAAA,IAEG5B,8BAIX,kBACWA,KAAKmB,8BAIhB,kBACWnB,KAAKoB"}