{"version":3,"file":"api.esm.js","sources":["../src/utils/Router.ts","../src/utils/Error.ts","../src/utils/Body.ts","../src/utils/Header.ts","../src/utils/Route.ts"],"sourcesContent":["import {RouterOptions} from \"../interfaces/RouterOptions\";\r\nimport {Route} from \"./Route\";\r\nimport express from \"express\";\r\n\r\nexport class Router {\r\n    private readonly _options: RouterOptions | undefined;\r\n    private readonly _moduleName: string;\r\n    private readonly _route: Route | any;\r\n    private _router: Router | any;\r\n\r\n    constructor(options: RouterOptions | undefined, moduleName: string, route: Route | any) {\r\n        this._options = options;\r\n        this._moduleName = moduleName;\r\n        this._route = route;\r\n    }\r\n\r\n    main() {\r\n        this._router = express.Router();\r\n        this._router.use(this._route.baseUrl, this._route.main(this._options));\r\n        this._router.get('/try', (req: express.Request, res: express.Response) => {\r\n            req;\r\n            res.send('success')\r\n        })\r\n        return this._router;\r\n    }\r\n\r\n    // @ts-ignore\r\n    get options () {\r\n        return this._options;\r\n    }\r\n\r\n    // @ts-ignore\r\n    get moduleName () {\r\n        return this._moduleName;\r\n    }\r\n\r\n    // @ts-ignore\r\n    get route () {\r\n        return this._route;\r\n    }\r\n}","import {Response} from 'express';\r\n\r\nexport const Error = (code: number, message: string, response: Response) => {\r\n    response.status(code).json({\r\n        error: true,\r\n        message\r\n    })\r\n}","import {Request, Response} from \"express\";\r\nimport {Error} from \"./Error\";\r\n\r\nexport const bodyController = (req: Request, res: Response, meta: [string]) => {\r\n    let error: boolean = false;\r\n    meta.map((mt: string) => {\r\n        if (!req.body[mt]) {\r\n            error = true;\r\n            // @ts-ignore\r\n            return Error(404, `Missing ${mt} in body`, res);\r\n        }\r\n    })\r\n    return error;\r\n}","import {Request, Response} from \"express\";\r\nimport {Error} from \"./Error\";\r\n\r\nexport const headerController = (req: Request, res: Response, meta: [string]) => {\r\n    let error: boolean = false;\r\n    meta.map((mt: string) => {\r\n        if (!req.headers[mt]) {\r\n            error = true;\r\n            // @ts-ignore\r\n            return Error(404, `Missing ${mt} in header`, res);\r\n        }\r\n    })\r\n    return error;\r\n}","import {RequestOptions} from \"../interfaces/RequestOptions\";\r\nimport {RouterOptions} from \"../interfaces/RouterOptions\";\r\nimport {bodyController} from \"./Body\";\r\nimport {headerController} from \"./Header\";\r\nimport {Request, Response, Router} from \"express\";\r\n\r\nexport class Route {\r\n    private readonly _baseUrl: string;\r\n    private readonly _request: [{\r\n        type: string,\r\n        path: string,\r\n        options: RequestOptions,\r\n        execute: void\r\n    }] | any;\r\n    private readonly _routes: [Route] | any;\r\n    private _router: Router | any;\r\n    private _options: RouterOptions | object;\r\n\r\n    constructor(baseUrl: string) {\r\n        this._baseUrl = baseUrl;\r\n        this._request = [];\r\n        this._routes = [];\r\n        this._options = {};\r\n    }\r\n\r\n    main(options: RouterOptions | object) {\r\n        this._options = options;\r\n        this._router = Router();\r\n        this._request.map((request: { type: string | number; path: string; options: RouterOptions; execute: (options: object, req: object, res: object) => void }) => {\r\n            this._router[request.type](request.path, (req: Request, res: Response) => {\r\n                // @ts-ignore\r\n                if (request.options['bodyController'] && request.options['bodyController'][0]) {\r\n                    // @ts-ignore\r\n                    if (bodyController(req, res, request.options['bodyController'])) return;\r\n                }\r\n\r\n                // @ts-ignore\r\n                if (request.options['headerController'] && request.options['headerController'][0]) {\r\n                    // @ts-ignore\r\n                    if (headerController(req, res, request.options['headerController'])) return;\r\n                }\r\n                request.execute(this._options, req, res);\r\n            })\r\n        })\r\n        if (this._routes[0]) {\r\n            this._routes.map((route: Route) => {\r\n                this._router.use(route.baseUrl, route.main(this._options))\r\n            })\r\n        }\r\n        return this._router;\r\n    }\r\n\r\n    use(route: Route) {\r\n        this._routes.push(route);\r\n    }\r\n\r\n    get(path: string ,options: RequestOptions, execute :(options: RouterOptions, req: Request, res: Response) => void) {\r\n        this._request.push({\r\n            type: 'get',\r\n            path,\r\n            options,\r\n            execute\r\n        })\r\n        return this\r\n    }\r\n\r\n    post(path: string, options: RequestOptions, execute :(options: RouterOptions, req: Request, res: Response) => void) {\r\n        // @ts-ignore\r\n        this._request.push({\r\n            type: 'post',\r\n            path,\r\n            options,\r\n            execute\r\n        })\r\n        return this\r\n    }\r\n\r\n    put(path: string, options: RequestOptions, execute :(options: RouterOptions, req: Request, res: Response) => void) {\r\n        // @ts-ignore\r\n        this._request.push({\r\n            type: 'put',\r\n            path,\r\n            options,\r\n            execute\r\n        })\r\n        return this\r\n    }\r\n\r\n    delete(path: string, options: RequestOptions, execute :(options: RouterOptions, req: Request, res: Response) => void) {\r\n        // @ts-ignore\r\n        this._request.push({\r\n            type: 'delete',\r\n            path,\r\n            options,\r\n            execute\r\n        })\r\n        return this\r\n    }\r\n\r\n    // @ts-ignore\r\n    get baseUrl() {\r\n        return this._baseUrl;\r\n    }\r\n\r\n    // @ts-ignore\r\n    get request() {\r\n        return this._request;\r\n    }\r\n}"],"names":["Router","options","moduleName","route","_options","_moduleName","_route","main","_router","express","use","baseUrl","get","req","res","send","Error","code","message","response","status","json","error","bodyController","meta","map","mt","body","headerController","headers","Route","_baseUrl","_request","_routes","request","type","path","execute","push","post","put"],"mappings":";;;;;;;;;;;;;;;;;;;;;IAIaA,MAAb;AAMI,kBAAYC,OAAZ,EAAgDC,UAAhD,EAAoEC,KAApE;AACI,SAAKC,QAAL,GAAgBH,OAAhB;AACA,SAAKI,WAAL,GAAmBH,UAAnB;AACA,SAAKI,MAAL,GAAcH,KAAd;AACH;;AAVL;;AAAA,SAYII,IAZJ,GAYI;AACI,SAAKC,OAAL,GAAeC,OAAO,CAACT,MAAR,EAAf;;AACA,SAAKQ,OAAL,CAAaE,GAAb,CAAiB,KAAKJ,MAAL,CAAYK,OAA7B,EAAsC,KAAKL,MAAL,CAAYC,IAAZ,CAAiB,KAAKH,QAAtB,CAAtC;;AACA,SAAKI,OAAL,CAAaI,GAAb,CAAiB,MAAjB,EAAyB,UAACC,GAAD,EAAuBC,GAAvB;AAErBA,MAAAA,GAAG,CAACC,IAAJ,CAAS,SAAT;AACH,KAHD;;AAIA,WAAO,KAAKP,OAAZ;AACH,GApBL;AAAA;;AAAA;AAAA;AAAA,SAuBI;AACI,aAAO,KAAKJ,QAAZ;AACH,KAzBL;;AAAA;AAAA;AAAA,SA4BI;AACI,aAAO,KAAKC,WAAZ;AACH,KA9BL;;AAAA;AAAA;AAAA,SAiCI;AACI,aAAO,KAAKC,MAAZ;AACH;AAnCL;;AAAA;AAAA;;ICFaU,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAeC,OAAf,EAAgCC,QAAhC;AACjBA,EAAAA,QAAQ,CAACC,MAAT,CAAgBH,IAAhB,EAAsBI,IAAtB,CAA2B;AACvBC,IAAAA,KAAK,EAAE,IADgB;AAEvBJ,IAAAA,OAAO,EAAPA;AAFuB,GAA3B;AAIH,CALM;;ICCMK,cAAc,GAAG,SAAjBA,cAAiB,CAACV,GAAD,EAAeC,GAAf,EAA8BU,IAA9B;AAC1B,MAAIF,KAAK,GAAY,KAArB;AACAE,EAAAA,IAAI,CAACC,GAAL,CAAS,UAACC,EAAD;AACL,QAAI,CAACb,GAAG,CAACc,IAAJ,CAASD,EAAT,CAAL,EAAmB;AACfJ,MAAAA,KAAK,GAAG,IAAR,CADe;;AAGf,aAAON,KAAK,CAAC,GAAD,eAAiBU,EAAjB,eAA+BZ,GAA/B,CAAZ;AACH;AACJ,GAND;AAOA,SAAOQ,KAAP;AACH,CAVM;;ACAA,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACf,GAAD,EAAeC,GAAf,EAA8BU,IAA9B;AAC5B,MAAIF,KAAK,GAAY,KAArB;AACAE,EAAAA,IAAI,CAACC,GAAL,CAAS,UAACC,EAAD;AACL,QAAI,CAACb,GAAG,CAACgB,OAAJ,CAAYH,EAAZ,CAAL,EAAsB;AAClBJ,MAAAA,KAAK,GAAG,IAAR,CADkB;;AAGlB,aAAON,KAAK,CAAC,GAAD,eAAiBU,EAAjB,iBAAiCZ,GAAjC,CAAZ;AACH;AACJ,GAND;AAOA,SAAOQ,KAAP;AACH,CAVM;;ICGMQ,KAAb;AAYI,iBAAYnB,OAAZ;AACI,SAAKoB,QAAL,GAAgBpB,OAAhB;AACA,SAAKqB,QAAL,GAAgB,EAAhB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAK7B,QAAL,GAAgB,EAAhB;AACH;;AAjBL;;AAAA,SAmBIG,IAnBJ,GAmBI,cAAKN,OAAL;;;AACI,SAAKG,QAAL,GAAgBH,OAAhB;AACA,SAAKO,OAAL,GAAeR,QAAM,EAArB;;AACA,SAAKgC,QAAL,CAAcP,GAAd,CAAkB,UAACS,OAAD;AACd,MAAA,KAAI,CAAC1B,OAAL,CAAa0B,OAAO,CAACC,IAArB,EAA2BD,OAAO,CAACE,IAAnC,EAAyC,UAACvB,GAAD,EAAeC,GAAf;AACrC;AACA,YAAIoB,OAAO,CAACjC,OAAR,CAAgB,gBAAhB,KAAqCiC,OAAO,CAACjC,OAAR,CAAgB,gBAAhB,EAAkC,CAAlC,CAAzC,EAA+E;AAC3E;AACA,cAAIsB,cAAc,CAACV,GAAD,EAAMC,GAAN,EAAWoB,OAAO,CAACjC,OAAR,CAAgB,gBAAhB,CAAX,CAAlB,EAAiE;AACpE;;;AAGD,YAAIiC,OAAO,CAACjC,OAAR,CAAgB,kBAAhB,KAAuCiC,OAAO,CAACjC,OAAR,CAAgB,kBAAhB,EAAoC,CAApC,CAA3C,EAAmF;AAC/E;AACA,cAAI2B,gBAAgB,CAACf,GAAD,EAAMC,GAAN,EAAWoB,OAAO,CAACjC,OAAR,CAAgB,kBAAhB,CAAX,CAApB,EAAqE;AACxE;;AACDiC,QAAAA,OAAO,CAACG,OAAR,CAAgB,KAAI,CAACjC,QAArB,EAA+BS,GAA/B,EAAoCC,GAApC;AACH,OAbD;AAcH,KAfD;;AAgBA,QAAI,KAAKmB,OAAL,CAAa,CAAb,CAAJ,EAAqB;AACjB,WAAKA,OAAL,CAAaR,GAAb,CAAiB,UAACtB,KAAD;AACb,QAAA,KAAI,CAACK,OAAL,CAAaE,GAAb,CAAiBP,KAAK,CAACQ,OAAvB,EAAgCR,KAAK,CAACI,IAAN,CAAW,KAAI,CAACH,QAAhB,CAAhC;AACH,OAFD;AAGH;;AACD,WAAO,KAAKI,OAAZ;AACH,GA5CL;;AAAA,SA8CIE,GA9CJ,GA8CI,aAAIP,KAAJ;AACI,SAAK8B,OAAL,CAAaK,IAAb,CAAkBnC,KAAlB;AACH,GAhDL;;AAAA,SAkDIS,GAlDJ,GAkDI,aAAIwB,IAAJ,EAAkBnC,OAAlB,EAA2CoC,OAA3C;AACI,SAAKL,QAAL,CAAcM,IAAd,CAAmB;AACfH,MAAAA,IAAI,EAAE,KADS;AAEfC,MAAAA,IAAI,EAAJA,IAFe;AAGfnC,MAAAA,OAAO,EAAPA,OAHe;AAIfoC,MAAAA,OAAO,EAAPA;AAJe,KAAnB;;AAMA,WAAO,IAAP;AACH,GA1DL;;AAAA,SA4DIE,IA5DJ,GA4DI,cAAKH,IAAL,EAAmBnC,OAAnB,EAA4CoC,OAA5C;AACI;AACA,SAAKL,QAAL,CAAcM,IAAd,CAAmB;AACfH,MAAAA,IAAI,EAAE,MADS;AAEfC,MAAAA,IAAI,EAAJA,IAFe;AAGfnC,MAAAA,OAAO,EAAPA,OAHe;AAIfoC,MAAAA,OAAO,EAAPA;AAJe,KAAnB;;AAMA,WAAO,IAAP;AACH,GArEL;;AAAA,SAuEIG,GAvEJ,GAuEI,aAAIJ,IAAJ,EAAkBnC,OAAlB,EAA2CoC,OAA3C;AACI;AACA,SAAKL,QAAL,CAAcM,IAAd,CAAmB;AACfH,MAAAA,IAAI,EAAE,KADS;AAEfC,MAAAA,IAAI,EAAJA,IAFe;AAGfnC,MAAAA,OAAO,EAAPA,OAHe;AAIfoC,MAAAA,OAAO,EAAPA;AAJe,KAAnB;;AAMA,WAAO,IAAP;AACH,GAhFL;;AAAA,qBAkFI,iBAAOD,IAAP,EAAqBnC,OAArB,EAA8CoC,OAA9C;AACI;AACA,SAAKL,QAAL,CAAcM,IAAd,CAAmB;AACfH,MAAAA,IAAI,EAAE,QADS;AAEfC,MAAAA,IAAI,EAAJA,IAFe;AAGfnC,MAAAA,OAAO,EAAPA,OAHe;AAIfoC,MAAAA,OAAO,EAAPA;AAJe,KAAnB;;AAMA,WAAO,IAAP;AACH,GA3FL;AAAA;;AAAA;AAAA;AAAA,SA8FI;AACI,aAAO,KAAKN,QAAZ;AACH,KAhGL;;AAAA;AAAA;AAAA,SAmGI;AACI,aAAO,KAAKC,QAAZ;AACH;AArGL;;AAAA;AAAA;;;;"}