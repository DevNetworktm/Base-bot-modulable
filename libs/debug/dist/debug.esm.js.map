{"version":3,"file":"debug.esm.js","sources":["../src/utils/Utils.ts","../src/utils/SendDebug.ts","../src/utils/SetColor.ts","../src/utils/Error.ts","../src/utils/Types.ts","../src/utils/Debug.ts"],"sourcesContent":["const Type: object = {\r\n    error: 124,\r\n    success: 82,\r\n    actions: 22,\r\n    modules: 18,\r\n    module: 171,\r\n    api: 184,\r\n    title: 21\r\n}\r\n\r\nexport const VerifyTypeExist = (type: string) => {\r\n    // @ts-ignore\r\n    return !!Type[type];\r\n}\r\n\r\nexport const ReturnColor = (type: \"error\" | \"success\" | \"actions\" | \"modules\" | \"module\" | \"api\" | \"title\") => {\r\n    // @ts-ignore\r\n    return Type[type];\r\n}","export const sendDebug = (message: string) => {\r\n    console.log(message)\r\n}","import {xterm} from \"cli-color\";\r\n\r\nexport const SetColor = (String: string, color: number) => {\r\n    let Text = String;\r\n    const part = String.split('$');\r\n    part.map(p => {\r\n        if (p.startsWith('→')) {\r\n            const text = p.slice(1, p.length)\r\n            Text = Text.replace(`$${p}$`, xterm(color)(text))\r\n        }\r\n    })\r\n    return Text\r\n}","import {sendDebug} from \"./SendDebug\";\r\nimport {SetColor} from \"./SetColor\";\r\n\r\nexport const sendError = (message: string) => {\r\n    const title: string = \"     [$→ERROR$]\"\r\n    sendDebug(SetColor(`${title} ${message}`, 124));\r\n}","import {ReturnColor} from \"./Utils\";\r\nimport {sendDebug} from \"./SendDebug\";\r\nimport {SetColor} from \"./SetColor\";\r\n\r\nexport const DebugSuccess = (message: string) => {\r\n    const title: string = \"     [$→SUCCESS$]\";\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('success')));\r\n}\r\n\r\nexport const DebugActions = (message: string) => {\r\n    const title: string = \"     [$→ACTIONS$]\";\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('actions')));\r\n}\r\n\r\nexport const DebugModules = (message: string, moduleName: string) => {\r\n    const title: string = `     [$→MODULES$] ($→${moduleName}$)`;\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('modules')));\r\n}\r\n\r\nexport const DebugModule = (message: string, moduleName: string) => {\r\n    const title: string = `     [$→MODULE$] ($→${moduleName}$)`;\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('module')));\r\n}\r\n\r\nexport const DebugApi = (message: string) => {\r\n    const title: string = `     [$→API$]`;\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('api')));\r\n}\r\n\r\nexport const DebugTitle = (title: string) => {\r\n    sendDebug(SetColor(`\\n   $→${title} →$`, ReturnColor('title')));\r\n}","import {DebugOptions} from \"../interfaces/DebugOptions\";\r\nimport {VerifyTypeExist} from \"./Utils\";\r\nimport {sendError} from \"./Error\";\r\nimport {ReplacesOptions} from \"../interfaces/ReplacesOptions\";\r\nimport {DebugApi, DebugModules, DebugSuccess, DebugTitle, DebugModule, DebugActions} from \"./Types\";\r\n\r\nexport const debug = (options: DebugOptions, message: string) => {\r\n    let Message: string = message;\r\n    if (!VerifyTypeExist(options.type)) return sendError(`($→${options.type}$) does exits !`);\r\n    if (options[\"replaces\"] && options[\"replaces\"][0]) {\r\n        options[\"replaces\"].map((meta: ReplacesOptions) => {\r\n            Message = Message.replace(meta.String, meta.data === \"moduleName\" ? (options['module'] ? options['module'] : \"undefined\") : meta.data)\r\n        })\r\n    }\r\n\r\n    if (options.type === \"error\") return sendError(Message);\r\n    if (options.type === \"success\") return DebugSuccess(Message);\r\n    if (options.type === \"actions\") return DebugActions(Message);\r\n    if (options.type === \"api\") return DebugApi(Message);\r\n    if (options.type === \"title\") return DebugTitle(Message);\r\n    if (options.type === \"modules\") return DebugModules(Message, options['module'] ? options['module'] : 'undefined');\r\n    if (options.type === \"module\") return DebugModule(Message, options['module'] ? options['module'] : 'undefined');\r\n}"],"names":["Type","error","success","actions","modules","module","api","title","VerifyTypeExist","type","ReturnColor","sendDebug","message","console","log","SetColor","String","color","Text","part","split","map","p","startsWith","text","slice","length","replace","xterm","sendError","DebugSuccess","DebugActions","DebugModules","moduleName","DebugModule","DebugApi","DebugTitle","debug","options","Message","meta","data"],"mappings":"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"}