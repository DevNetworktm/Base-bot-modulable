{"version":3,"file":"debug.cjs.production.min.js","sources":["../src/utils/Utils.ts","../src/utils/SendDebug.ts","../src/utils/SetColor.ts","../src/utils/Error.ts","../src/utils/Debug.ts","../src/utils/Types.ts"],"sourcesContent":["const Type: object = {\r\n    error: 124,\r\n    success: 82,\r\n    actions: 22,\r\n    modules: 18,\r\n    module: 171,\r\n    api: 184,\r\n    title: 21\r\n}\r\n\r\nexport const VerifyTypeExist = (type: string) => {\r\n    // @ts-ignore\r\n    return !!Type[type];\r\n}\r\n\r\nexport const ReturnColor = (type: \"error\" | \"success\" | \"actions\" | \"modules\" | \"module\" | \"api\" | \"title\") => {\r\n    // @ts-ignore\r\n    return Type[type];\r\n}","export const sendDebug = (message: string) => {\r\n    console.log(message)\r\n}","import {xterm} from \"cli-color\";\r\n\r\nexport const SetColor = (String: string, color: number) => {\r\n    let Text = String;\r\n    const part = String.split('$');\r\n    part.map(p => {\r\n        if (p.startsWith('→')) {\r\n            const text = p.slice(1, p.length)\r\n            Text = Text.replace(`$${p}$`, xterm(color)(text))\r\n        }\r\n    })\r\n    return Text\r\n}","import {sendDebug} from \"./SendDebug\";\r\nimport {SetColor} from \"./SetColor\";\r\n\r\nexport const sendError = (message: string) => {\r\n    const title: string = \"     [$→ERROR$]\"\r\n    sendDebug(SetColor(`${title} ${message}`, 124));\r\n}","import {DebugOptions} from \"../interfaces/DebugOptions\";\r\nimport {VerifyTypeExist} from \"./Utils\";\r\nimport {sendError} from \"./Error\";\r\nimport {ReplacesOptions} from \"../interfaces/ReplacesOptions\";\r\nimport {DebugApi, DebugModules, DebugSuccess, DebugTitle, DebugModule, DebugActions} from \"./Types\";\r\n\r\nexport const debug = (options: DebugOptions, message: string) => {\r\n    let Message: string = message;\r\n    if (!VerifyTypeExist(options.type)) return sendError(`($→${options.type}$) does exits !`);\r\n    if (options[\"replaces\"] && options[\"replaces\"][0]) {\r\n        options[\"replaces\"].map((meta: ReplacesOptions) => {\r\n            Message = Message.replace(meta.String, meta.data === \"moduleName\" ? (options['module'] ? options['module'] : \"undefined\") : meta.data)\r\n        })\r\n    }\r\n\r\n    if (options.type === \"error\") return sendError(Message);\r\n    if (options.type === \"success\") return DebugSuccess(Message);\r\n    if (options.type === \"actions\") return DebugActions(Message);\r\n    if (options.type === \"api\") return DebugApi(Message);\r\n    if (options.type === \"title\") return DebugTitle(Message);\r\n    if (options.type === \"modules\") return DebugModules(Message, options['module'] ? options['module'] : 'undefined');\r\n    if (options.type === \"module\") return DebugModule(Message, options['module'] ? options['module'] : 'undefined');\r\n}","import {ReturnColor} from \"./Utils\";\r\nimport {sendDebug} from \"./SendDebug\";\r\nimport {SetColor} from \"./SetColor\";\r\n\r\nexport const DebugSuccess = (message: string) => {\r\n    const title: string = \"     [$→SUCCESS$]\";\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('success')));\r\n}\r\n\r\nexport const DebugActions = (message: string) => {\r\n    const title: string = \"     [$→ACTIONS$]\";\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('actions')));\r\n}\r\n\r\nexport const DebugModules = (message: string, moduleName: string) => {\r\n    const title: string = `     [$→MODULES$] ($→${moduleName}$)`;\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('modules')));\r\n}\r\n\r\nexport const DebugModule = (message: string, moduleName: string) => {\r\n    const title: string = `     [$→MODULE$] ($→${moduleName}$)`;\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('module')));\r\n}\r\n\r\nexport const DebugApi = (message: string) => {\r\n    const title: string = `     [$→API$]`;\r\n    sendDebug(SetColor(`${title} ${message}`, ReturnColor('api')));\r\n}\r\n\r\nexport const DebugTitle = (title: string) => {\r\n    sendDebug(SetColor(`\\n   $→${title} →$`, ReturnColor('title')));\r\n}"],"names":["Type","error","success","actions","modules","module","api","title","ReturnColor","type","sendDebug","message","console","log","SetColor","String","color","Text","split","map","p","startsWith","text","slice","length","replace","xterm","sendError","options","Message","meta","data","DebugSuccess","DebugActions","DebugApi","moduleName","DebugModules","DebugModule"],"mappings":"+FAAMA,EAAe,CACjBC,MAAO,IACPC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,OAAQ,IACRC,IAAK,IACLC,MAAO,IAQEC,EAAc,SAACC,UAEjBT,EAAKS,ICjBHC,EAAY,SAACC,GACtBC,QAAQC,IAAIF,ICCHG,EAAW,SAACC,EAAgBC,OACjCC,EAAOF,SACEA,EAAOG,MAAM,KACrBC,KAAI,SAAAC,MACDA,EAAEC,WAAW,KAAM,KACbC,EAAOF,EAAEG,MAAM,EAAGH,EAAEI,QAC1BP,EAAOA,EAAKQ,YAAYL,MAAMM,QAAMV,EAANU,CAAaJ,QAG5CL,GCREU,EAAY,SAAChB,GAEtBD,EAAUI,EAAYP,mBAASI,EAAW,qBCCzB,SAACiB,EAAuBjB,OACrCkB,EAAkBlB,SJKbX,EIJY4B,EAAQnB,OACzBmB,EAAO,UAAgBA,EAAO,SAAa,IAC3CA,EAAO,SAAaT,KAAI,SAACW,GACrBD,EAAUA,EAAQJ,QAAQK,EAAKf,OAAsB,eAAde,EAAKC,KAAyBH,EAAO,OAAaA,EAAO,OAAa,YAAeE,EAAKC,SAIpH,UAAjBH,EAAQnB,KAAyBkB,EAAUE,GAC1B,YAAjBD,EAAQnB,KCZY,SAACE,GAEzBD,EAAUI,EAAYP,qBAASI,EAAWH,EAAY,aDUfwB,CAAaH,GAC/B,YAAjBD,EAAQnB,KCRY,SAACE,GAEzBD,EAAUI,EAAYP,qBAASI,EAAWH,EAAY,aDMfyB,CAAaJ,GAC/B,QAAjBD,EAAQnB,KCMQ,SAACE,GAErBD,EAAUI,EAAYP,iBAASI,EAAWH,EAAY,SDRnB0B,CAASL,GACvB,UAAjBD,EAAQnB,UCWZC,EAAUI,YDXsCe,QCWPrB,EAAY,WDVhC,YAAjBoB,EAAQnB,KCNY,SAACE,EAAiBwB,GAE1CzB,EAAUI,0BADoCqB,EACxB5B,MAASI,EAAWH,EAAY,aDIf4B,CAAaP,EAASD,EAAO,OAAaA,EAAO,OAAa,aAChF,WAAjBA,EAAQnB,KCFW,SAACE,EAAiBwB,GAEzCzB,EAAUI,yBADmCqB,EACvB5B,MAASI,EAAWH,EAAY,YDAhB6B,CAAYR,EAASD,EAAO,OAAaA,EAAO,OAAa,qBAbxDD,QAAgBC,EAAQnB"}